{"version":3,"sources":["assets/logo.svg","assets/like.svg","assets/dislike.svg","services/api.js","pages/Login/Login.js","pages/Main/Main.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","axios","create","baseURL","Login","history","useState","username","setUsername","event","a","preventDefault","post","response","_id","data","push","className","onSubmit","src","logo","alt","type","placeholder","value","onChange","target","Main","match","users","setUsers","id","headers","user","params","filter","useEffect","get","loadUsers","to","length","map","key","avatar","name","bio","onClick","handleLike","like","handleDisLike","dislike","Routes","path","exact","component","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,qPCM5BC,E,OAJHC,EAAMC,OAAO,CACvBC,QAAS,0B,iBCII,SAASC,EAAT,GAA6B,IAAZC,EAAW,EAAXA,QAAW,EACTC,mBAAS,IADA,mBAClCC,EADkC,KACxBC,EADwB,iDAGzC,WAA4BC,GAA5B,iBAAAC,EAAA,6DACED,EAAME,iBADR,SAGyBX,EAAIY,KAAK,eAAgB,CAC9CL,SAAUA,IAJd,OAGQM,EAHR,OAOUC,EAAQD,EAASE,KAAjBD,IAERT,EAAQW,KAAR,uBAA6BF,IAT/B,4CAHyC,sBAezC,OACE,yBAAKG,UAAU,mBACb,0BAAMC,SAjB+B,6CAkBnC,yBAAKC,IAAKC,IAAMC,IAAI,WACpB,2BAAOC,KAAK,OACVC,YAAY,kCACZC,MAAOjB,EACPkB,SAAU,SAAAhB,GAAK,OAAID,EAAYC,EAAMiB,OAAOF,UAE9C,4BAAQF,KAAK,UAAb,Y,4CCrBO,SAASK,EAAT,GAA0B,IAAVC,EAAS,EAATA,MAAS,EAEVtB,mBAAS,IAFC,mBAE9BuB,EAF8B,KAEvBC,EAFuB,iDAkBtC,WAA0BC,GAA1B,SAAArB,EAAA,sEACQV,EAAIY,KAAJ,uBAAyBmB,EAAzB,UAAqC,KAAM,CAC/CC,QAAS,CACPC,KAAML,EAAMM,OAAOH,MAHzB,OAOED,EAASD,EAAMM,QAAO,SAAAF,GAAI,OAAIA,EAAKnB,MAAQiB,MAP7C,4CAlBsC,kEA4BtC,WAA6BA,GAA7B,SAAArB,EAAA,sEACQV,EAAIY,KAAJ,uBAAyBmB,EAAzB,aAAwC,KAAM,CAClDC,QAAS,CACPC,KAAML,EAAMM,OAAOH,MAHzB,OAOED,EAASD,EAAMM,QAAO,SAAAF,GAAI,OAAIA,EAAKnB,MAAQiB,MAP7C,4CA5BsC,sBAsCtC,OAlCAK,qBAAU,WAAM,4CACd,4BAAA1B,EAAA,sEACyBV,EAAIqC,IAAI,eAAgB,CAC7CL,QAAS,CACPC,KAAML,EAAMM,OAAOH,MAHzB,OACQlB,EADR,OAOEiB,EAASjB,EAASE,MAPpB,4CADc,uBAAC,WAAD,wBAWduB,KACC,CAACV,EAAMM,OAAOH,KAuBf,yBAAKd,UAAU,kBACb,kBAAC,IAAD,CAAMsB,GAAG,WACP,yBAAKpB,IAAKC,IAAMC,IAAI,UAElBQ,EAAMW,OAAS,EACjB,4BACGX,EAAMY,KAAI,SAAAR,GAAI,OACb,wBAAIS,IAAKT,EAAKnB,KACZ,yBAAKK,IAAKc,EAAKU,OAAQtB,IAAKY,EAAKW,OACjC,gCACE,gCAASX,EAAKW,MACd,2BAAIX,EAAKY,MAGX,yBAAK5B,UAAU,WACb,4BAAQA,UAAU,cAAcK,KAAK,SAASwB,QAAS,kBAtD/B,2CAsDqCC,CAAWd,EAAKnB,OAC3E,yBAAKK,IAAK6B,IAAM3B,IAAI,UAEtB,4BAAQJ,UAAU,iBAAiBK,KAAK,SAASwB,QAAS,kBAzDlC,2CAyDwCG,CAAchB,EAAKnB,OACjF,yBAAKK,IAAK+B,IAAS7B,IAAI,mBAOjC,yBAAKJ,UAAU,SAAf,cCrEO,SAASkC,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UAAUC,OAAK,EAACC,UAAWlD,IACvC,kBAAC,IAAD,CAAOgD,KAAK,mBAAmBE,UAAW3B,KCCjC4B,MANf,WACE,OACE,kBAACJ,EAAD,OCKEK,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShC,MACvB,2DAsCN,SAASiC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,UAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,UAAN,sBAEP9B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX9B,QAAS,CAAE,iBAAkB,YAE5BmC,MAAK,SAAAtD,GAEJ,IAAM8E,EAAc9E,EAASmB,QAAQK,IAAI,gBAEnB,MAApBxB,EAAS+E,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBnC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAqB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCxC/BE,K","file":"static/js/main.a33a0611.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6a01ceef.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.542059a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/dislike.d4ec34e8.svg\";","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3333'\r\n});\r\n\r\nexport default api;","import React, { useState } from 'react';\r\nimport './Login.css';\r\n\r\nimport api from '../../services/api';\r\n\r\nimport logo from '../../assets/logo.svg';\r\n\r\nexport default function Login({ history }) {\r\n  const [username, setUsername] = useState('');\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const response = await api.post('/Tindev/devs', {\r\n      username: username,\r\n    });\r\n\r\n    const { _id } = response.data;\r\n\r\n    history.push(`/Tindev/devs/${_id}`);\r\n  }\r\n\r\n  return(\r\n    <div className=\"login-container\">\r\n      <form onSubmit={handleSubmit} >\r\n        <img src={logo} alt=\"tindev\"/>\r\n        <input type=\"text\"\r\n          placeholder=\"Digite seu usuÃ¡rio do GitHub\"\r\n          value={username}\r\n          onChange={event => setUsername(event.target.value)}\r\n        />\r\n        <button type=\"submit\">Entrar</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Main.css';\r\n\r\nimport api from '../../services/api';\r\n\r\nimport logo from '../../assets/logo.svg';\r\nimport like from '../../assets/like.svg';\r\nimport dislike from '../../assets/dislike.svg';\r\n\r\nexport default function Main({ match }) {\r\n\r\n  const [ users, setUsers ] = useState([]); \r\n\r\n  useEffect(() => {\r\n    async function loadUsers() {\r\n      const response = await api.get('/Tindev/devs', {\r\n        headers: {\r\n          user: match.params.id,\r\n        }\r\n      });\r\n\r\n      setUsers(response.data);\r\n    }\r\n\r\n    loadUsers();\r\n  }, [match.params.id]);\r\n\r\n  async function handleLike(id) {\r\n    await api.post(`/Tindev/devs/${id}/likes`, null, {\r\n      headers: { \r\n        user: match.params.id \r\n      },\r\n    });\r\n\r\n    setUsers(users.filter(user => user._id !== id));\r\n  }\r\n\r\n  async function handleDisLike(id) {\r\n    await api.post(`/Tindev/devs/${id}/dislikes`, null, {\r\n      headers: { \r\n        user: match.params.id \r\n      },\r\n    });\r\n\r\n    setUsers(users.filter(user => user._id !== id));\r\n  }\r\n\r\n  return(\r\n    <div className=\"main-container\">\r\n      <Link to='/Tindev'>\r\n        <img src={logo} alt=\"logo\"/>\r\n      </Link>\r\n        { users.length > 0 ? (\r\n        <ul>\r\n          {users.map(user => (\r\n            <li key={user._id}>\r\n              <img src={user.avatar} alt={user.name}/>\r\n              <footer>\r\n                <strong>{user.name}</strong>\r\n                <p>{user.bio}</p>\r\n              </footer>\r\n  \r\n              <div className=\"buttons\">\r\n                <button className=\"like-button\" type=\"button\" onClick={() => handleLike(user._id)}>\r\n                  <img src={like} alt=\"like\"/>\r\n                </button>\r\n                <button className=\"dislike-button\" type=\"button\" onClick={() => handleDisLike(user._id)}>\r\n                  <img src={dislike} alt=\"dislike\"/>\r\n                </button>\r\n              </div>\r\n            </li>\r\n          ))}  \r\n      </ul>\r\n      ) : (\r\n        <div className=\"empty\">Acabou :(</div>\r\n      )}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\n\r\nimport Login from './pages/Login/Login';\r\nimport Main from './pages/Main/Main';\r\n\r\nexport default function Routes() {\r\n  return(\r\n    <BrowserRouter>\r\n      <Route path=\"/Tindev\" exact component={Login}/>\r\n      <Route path=\"/Tindev/devs/:id\" component={Main}/>\r\n    </BrowserRouter>\r\n  );\r\n}","import React from 'react';\nimport './App.css';\n\nimport Routes from './routes.js';\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}